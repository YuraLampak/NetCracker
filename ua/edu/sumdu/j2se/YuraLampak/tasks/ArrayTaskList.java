package ua.edu.sumdu.j2se.YuraLampak.tasks;/** * Class ArrayTaskList * for * programm <b>Task manager</b> * * @author YuraLampak * @version 1.0 */public class ArrayTaskList extends TaskList {    /**     * The array buffer into which the elements of the ArrayTaskList are stored.     */    private Task[] elementsData;    /**     * The size of the ArrayList (the number of elements it contains)     */    private int size = 0;    /**     * Default initial capacity.     */    private static final int emptyDefCap = 5;    /**     * Default constructor.     * Constructs an empty TaskList with default capacity.     */    public ArrayTaskList() { elementsData = new Task [emptyDefCap]; }    /**     * Constructs an empty TaskList with initial capacity.     *     * @param initCapacity take initial capacity of the TaskList     */    public ArrayTaskList (int initCapacity){        if(initCapacity > 0) {            elementsData = new Task [initCapacity];        } else if (initCapacity < 0) {            throw new IllegalArgumentException("capacity has not be negative");        } else {            elementsData = new Task [emptyDefCap];        }    }    /**     * Appends the task to the end of this TaskList.     *     * @param task is appendes to the TaskList     */    public void add (Task task) {        if (task == null)            throw new NullPointerException("Can't add task which is null");        if (size == 0)            elementsData[size++] =  task;        else if (size < elementsData.length){            Task oldData[];            oldData = new Task[elementsData.length];            System.arraycopy(elementsData, 0, oldData, 0, elementsData.length);            int newCapacity = (elementsData.length * 3 / 2 + 1);            elementsData = new Task [newCapacity];            System.arraycopy(oldData, 0, elementsData, 0, oldData.length);            elementsData[size++] = task;        }    }    /**     * Removes the task at the specified position in this TaskLlist.     * Shifts all subsequent tasks to the left (subtracts one from their indices).     *     * @param task which is removes from TaskList     * @return the <tt>true</tt> if such a task was on the list.     */    public boolean remove(Task task) {        if (task == null)            throw new NullPointerException("tried to delete null task");        else {            for (int i = 0; i < size(); i++) {                if (task.equals(elementsData[i])){                    int numRem = size - i;                    if (numRem > 0) {                        System.arraycopy(elementsData, i + 1, elementsData, i, numRem);                        elementsData[--size] = null;                        return true;                    }                }            }        } return false;    }    /**     * Returns task of this TaskList on specified ID.     *     * @param index is specified ID in TaskList     * @return task of this TaskList on specified ID.     */    public Task getTask(int index){        if (index < 0)            throw new IllegalArgumentException("index has not be negative");        return elementsData[index];    }    /**     * Returns amount of tasks in the TaskList     *     * @return amount of tasks in the TaskList     */    public int size(){ return size; }}